---
title: Homework 7 - Creating a resume database
author: Benjamin Estrada
date: 11/11/2023
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

(The document appears to be a scaffold for a homework assignment titled "Homework 7 - Creating a resume database" authored by Benjamin Estrada on 11/11/2023. It outlines a series of tasks related to creating and interacting with a resume database. The document includes Python code snippets using libraries like Pandas, SQLAlchemy, and IPython to interact with a MySQL database.

The scaffold includes sections such as:

Overview and description: a brief introduction to the project and the database being created.
Crows-foot diagram: Contains an entity-relationship diagram illustrating the relationships between the tables in the database.
Examples of data in the database: Provides descriptions of tables like people, skills, and roles with code snippets to display sample data from these tables.
Sample queries: Presents various SQL queries (like listing skill names, people's names and email addresses, etc.) along with expected sample results.
Reflection: A section prompting the author to reflect on their experience with the assignment. )


GITHUB URL:  <https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-io-benjamin>

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

The project involves creating a relational database for managing resumes, skills, roles, and people-related information. The database is designed to organize and store data about individuals (people), their skills, roles assigned, and associated metadata. It encompasses tables for people, skills, roles, peopleskills, and peopleroles. The people table holds personal details, skills table contains various skills, roles table represents different roles, while peopleskills and peopleroles serve as junction tables linking people with their respective skills and roles. This database serves as a comprehensive repository to manage and analyze resume-related data for individuals in various roles and skillsets.

## Crows-foot diagram

The provided Mermaid diagram illustrates the relationships between various tables in the database schema. It shows how different entities are interconnected:

SKILLS: Represents skills with attributes like ID, name, description, and tag.
PEOPLE: Contains information about individuals with attributes such as people_id, first_name, last_name, email, linkedin_url, headshot_url, discord_handle, and brief_bio.
PEOPLE_SKILLS: Serves as an associative table linking people with their acquired skills. It includes fields for ID, skills_id, people_id, and date_acquired.
ROLES: Defines various roles with attributes ID, name, and sort_priority.
PEOPLE_ROLES: Represents the association between people and roles, containing fields like ID, people_id, role_id, and date_assigned.

```{mermaid}
erDiagram
    SKILLS ||--o{ PEOPLE_SKILLS : "0..*" 
    PEOPLE ||--o{ PEOPLE_SKILLS : "0..*"
    PEOPLE ||--o{ PEOPLE_ROLES : "0..*"
    ROLES ||--o{ PEOPLE_ROLES : "0..*"
    
    SKILLS {
        int id
        varchar(255) name
        varchar(255) description
        varchar(255) tag
    }
    PEOPLE {
        int people_id
        varchar(255) first_name
        varchar(255) last_name
        varchar(255) email
        varchar(4096) linkedin_url
        varchar(4096) headshot_url
        varchar(255) discord_handle
        varchar(4096) brief_bio
    }
    PEOPLE_SKILLS {
        int id
        int skills_id
        int people_id
        date date_acquired
    }
    ROLES {
        int id
        varchar(255) name
        int sort_priority
    }
    PEOPLE_ROLES {
        int id
        int people_id
        int role_id
        date date_assigned
    }

```

## Examples of data in the database

People Table
The people table stores information about individuals. It includes the following fields:

people_id: Unique identifier for each person.
first_name: First name of the individual.
last_name: Last name of the individual.
email: Email address of the person.
linkedin_url: URL to the person's LinkedIn profile.
headshot_url: URL to the person's headshot image.
discord_handle: Discord handle of the individual.
brief_bio: A brief biography or description.

Skills Table
The skills table contains information about various skills. It comprises the following fields:

id: Unique identifier for each skill.
name: Name of the skill.
description: Description explaining the skill.
tag: A tag categorizing the skill.

Roles Table
The roles table stores details about different roles. It consists of the following fields:

id: Unique identifier for each role.
name: Name of the role.
sort_priority: An integer representing the priority/order of the role.


### People table

The *people* table contains elements that describe ... 

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe ... 

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT * FROM skills;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table contains elements that describe ... 

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT * FROM roles;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name

(here a sample query)

```{python}
sql = f"""
select * from people
"""
```


(and here is a sample result from the query)

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


### List people names and email addresses ordered by last_name

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT last_name, email
FROM people
ORDER BY last_name;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List skill names of Person 1

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT s.name AS skill_name
FROM skills s
JOIN peopleskills ps ON s.id = ps.skills_id
WHERE ps.people_id = 1;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names with Skill 6

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT p.last_name
FROM people p
JOIN peopleskills ps ON p.people_id = ps.people_id
WHERE ps.skills_id = 6;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people with a DEVELOPER role

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT p.last_name
FROM people p
JOIN peopleroles pr ON p.people_id = pr.people_id
JOIN roles r ON pr.role_id = r.id
WHERE r.name = 'Developer';
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and email addresses of people without skills

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT p.last_name, p.email
FROM people p
LEFT JOIN peopleskills ps ON p.people_id = ps.people_id
WHERE ps.skills_id IS NULL;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and tags of unused skills

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT s.name, s.tag
FROM skills s
LEFT JOIN peopleskills ps ON s.id = ps.skills_id
WHERE ps.skills_id IS NULL;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names and skill names with the BOSS role

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT p.last_name, s.name AS skill_name
FROM people p
JOIN peopleroles pr ON p.people_id = pr.people_id
JOIN roles r ON pr.role_id = r.id
JOIN peopleskills ps ON p.people_id = ps.people_id
JOIN skills s ON ps.skills_id = s.id
WHERE r.name = 'Boss';
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List ids and names of unused roles

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT r.id, r.name
FROM roles r
LEFT JOIN peopleroles pr ON r.id = pr.role_id
WHERE pr.role_id IS NULL;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

## Reflection

Working on this assignment allowed for a deeper understanding of database design, SQL queries, and their practical implementation. The task of structuring tables, defining relationships, and executing SQL commands helped bridge the gap between theoretical knowledge and practical application. It highlighted the importance of accurate data modeling, query optimization, and the significance of precise syntax. This experience fostered a stronger grasp of database management concepts and emphasized the need for meticulousness in database design and querying processes.

